import os
import sys

import asyncio

from aiogram import Bot, Dispatcher, executor, filters, types

from aiogram.utils.markdown import hlink

API_TOKEN = ''

# Мы создаём экземпляр бота.
# Этот класс будет отвечать за связь с Телеграмом
# И за операции, которые может выполнять бот:
# Отправлять сообщения, отправлять фото, пересылать сообщения, удалять и тд.
# Указываем parse_mode=HTML для возможности форматировать ссылки


bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)


# МЫ создаём диспетчер.
# Исходя из названия, можно понять, что диспетчер занимается
# Распределением поступающих боту сообщений.
# В зависимости от наличия определённых комманд в сообщении пользователя
#   к примеру, пользователь пишет боту /start
# Или соблюдения определённых условий
#   к примеру, пользователь начинает сообщение со слова привет
#   и в этом случае мы с ним здороваемся.

# Получает Update (Обновление)
# https://core.telegram.org/bots/api#update

диспетчер = Dispatcher(bot)


def получить_название_всех_изображений():
    """
    Итерируется по указанной папке с изображениями.

    Возвращает
    -------
    список строк с названием изображений в папке images
    [
         'images/img1.png',
         'images/bot2.png',
         'images/bot4.jpg'
    ]

    """


    путь_к_папке_изображений = os.path.join(
        os.path.dirname(os.path.abspath(__file__)),
        'images'
    )

    достустимые_расширения = ('jpg', 'png', )

    изображения = []

    for файл in os.listdir(путь_к_папке_изображений):

        # Если расширение файла это одно из содержащихся в достустимые_расширения
        # Добавляем его в список, т.к. это изображение
        if файл.split('.')[-1] in достустимые_расширения:
            изображения.append( os.path.join(путь_к_папке_изображений, файл) )

    return изображения


async def послать_медиа_группу(диспетчер):
    """
    Посылаем медиагруппу из телеграм бота.

    Параметры
    ----------
    диспетчер : Диспетчер класса Dispatcher, отвечает за маршрутизацию
        сообщений, не имеет значения для работы данной функции
    """

    # Создаём "контейнер" для наших медиа, т.е. изображений

    media = types.MediaGroup()

    # Получаем список текущих изображений в указанной папке

    все_изображения = получить_название_всех_изображений()

    текст_ссылки = 'читать дальше ...'

    ссылка = ''

    for позиция, путь_к_изображению in enumerate(все_изображения, start=1):

        # Добавляем описание только к последней фотографии.

        if позиция == len(все_изображения):
            описание = "Описание для изображения. " + hlink(текст_ссылки, ссылка)
        else:
            описание = None

        # По очереди добавляем все изображения и директории
        # К нашему контйнеру.
        # При этом добавляем описание только к последней фотографии,
        # А у всех остальных описание = None
        media.attach_photo(types.InputFile(путь_к_изображению), описание)

    try:

        # Пытаемся послать медиагруппу в указанный chat_id
        await bot.send_media_group(chat_id='-1001188248012' ,media=media)

    except Exception as ошибка:

        # В случае ошибки, сообщаем об этом пользователю и
        # И прерываем выполнение скрипта командой
        # raise

        print("Во время отправки медиагруппы произошла ошибка")
        raise ошибка

    # При успешной отправке сообщений
    # Выводим на экран полезное сообщение
    # И завершаем работу скрипта.

    print("Отправка сообщений завершена.")
    sys.exit(0)


if __name__ == '__main__':

    # python app.py
    #     __name__ = '__main__'
    #
    # python web.py
    #     __name__ = 'app'

    # Это место называется entrypoint

    # executor отвечает за запуск бота
    # 1 арг. передаём диспетчер
    # 2. keyword-арг. я передаю функцию, которая будет выполнена
    # При запуске бота
    # 3. аргументом я говорю боту, чтобы он игнорировал старые сообщения
    # Поскольку бот с сообщениями не работает
    executor.start_polling(
        диспетчер,
        on_startup=послать_медиа_группу,
        skip_updates=True,
        )
